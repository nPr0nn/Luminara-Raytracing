
# GLFW Directories
GLFW_DIR := ext/glfw
GLFW_BUILD_DIR := $(GLFW_DIR)/build
GLAD_DIR := ext/glad/src

# Targets
.PHONY: all glfw render clean

# Source Files Serial
SRC_FILES = src/serial/main.c \
						src/serial/utils/utils.c \
						src/serial/window/glfw_window.c \
						src/serial/window/callbacks.c \
						src/serial/window/shaders.c \
						src/serial/window/renderer.c \
						src/serial/geometry/vec/vec3.c \
						src/serial/geometry/ray/ray.c \
						src/serial/geometry/hittable/hittable_list.c \
						src/serial/geometry/sphere/sphere.c \
						src/serial/camera/camera.c \
						$(GLAD_DIR)/glad.c

# Source Files Parallel
CUDA_FILES = src/parallel_cuda/main.cu \

C_FILES    = src/parallel_cuda/window/glfw_window.c \
						 src/parallel_cuda/window/callbacks.c \
						 src/parallel_cuda/window/shaders.c \
						 src/parallel_cuda/window/renderer.c \
						 $(GLAD_DIR)/glad.c

# Object Files
C_OBJS    = $(C_FILES:.c=.o)
CUDA_OBJS = $(CUDA_FILES:.cu=.o)
	
all: glfw render

glfw:
	@echo "Building GLFW..."
	@mkdir -p $(GLFW_BUILD_DIR)
	@cd $(GLFW_BUILD_DIR) && cmake .. && $(MAKE)

render: glfw
	@echo "Building render..."
	@gcc $(SRC_FILES) -o main -L$(GLFW_BUILD_DIR)/src -lglfw3 -lm 
	@echo "Render built successfully. Running..." 
	@./main

%.o: %.c
	@gcc -I$(GLFW_DIR)/include -I$(GLAD_DIR) -c $< -o $@
%.o: %.cu
	@nvcc -I$(GLFW_DIR)/include -I$(GLAD_DIR) -c $< -o $@	
render_cuda: glfw $(C_OBJS) $(CUDA_OBJS)
	@echo "Building render..."
	@nvcc $(C_OBJS) $(CUDA_OBJS) -o main -L$(GLFW_BUILD_DIR)/src -lglfw3 -lm
	@echo "Render built successfully. Running..." 
	@./main

clean:
	@echo "Cleaning up..."
	@rm -rf $(GLFW_BUILD_DIR)
	@rm -f main
	@rm -f $(OBJ_FILES) $(CUDA_OBJS) main		
	@echo "Cleanup complete."
